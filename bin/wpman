#!/bin/env python
import os, re, requests, argparse, time
import notify


def getArgs() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-c",
        "--config",
        dest="config",
        help="set configuration FILE path",
        metavar="FILE",
    )
    parser.add_argument(
        "-n",
        "--nonstop",
        action="store_true",
        dest="nonstop",
        default=False,
        help="ask endlessly to select a wallpaper",
    )
    parser.add_argument(
        "-t",
        "--try-all",
        dest="delay",
        help="try all the wallpapers with TIME delay",
        metavar="TIME",
        type=int,
        default=None,
        const=2,
        nargs="?",
    )
    parser.add_argument(
        "-w",
        "--wallpaper",
        dest="number",
        help="set wallpaper ID immediately",
        metavar="ID",
        type=int,
    )
    options = parser.parse_args()
    if options.config is None:
        options.config = os.path.expanduser("~") + "/.config/DotFiles/wallpapers.md"
    return options


class Wallpaper:
    def __init__(self, section: str, name: str, url: str, credits_link: str) -> None:
        self.section = section
        self.name = name
        self.url = url
        self.credits_link = credits_link

    def download(self, output: str) -> None:
        with open(output, "wb") as f:
            f.write(requests.get(self.url).content)


class WallpaperManager:
    def __init__(self, path: str) -> None:
        self.path = path
        self.selected = -1
        self.command = ""
        self.output = ""
        self.wps = []
        self.fromConfig()
        self.count = len(self.wps)

    def fromConfig(self) -> None:
        fcontent = ""
        with open(self.path, "r") as f:
            fcontent = f.read()
        flen = len(fcontent)
        finds = [
            i
            for i in range(flen)
            if fcontent[i] == "#" and fcontent[i + 1] == "#" and fcontent[i - 1] == "\n"
        ]
        self.output, self.command = re.findall(r"`([^`]+)`", fcontent[: finds[0]])
        self.output = os.path.expanduser(self.output)
        sections = []
        for i, c in enumerate(finds):
            line = fcontent[c:].split("\n")[0]
            sections.append(line.replace("## ", ""))
            finds[i] = c + len(line)

        wpre = re.compile(
            r"\[\!\[(?P<name>[^\]]+)\]\((?P<direct_link>[^\)]+)\)\]\((?P<page_link>[^\)]+)\)"
        )
        for i in range(len(finds)):
            section_content = re.findall(
                wpre,
                fcontent[
                    finds[i] : finds[i + 1] - len(sections[i])
                    if i + 1 < len(finds)
                    else flen
                ].replace("## ", ""),
            )
            for wp in section_content:
                self.wps.append(
                    Wallpaper(
                        section=sections[i],
                        name=wp[0],
                        url=wp[1],
                        credits_link=wp[2],
                    )
                )
                if wp[0] == "Current":
                    self.selected = i

    def tryAll(self, delay):
        try:
            for i in range(3):
                notify.notification("Starting in", f"{3 - i}...", 1000)
                time.sleep(1)
            for i, w in enumerate(self.wps):
                notify.notification(f"[{i}] ({w.section})", f"{w.name}", delay * 1000)
                self.select(i)
                self.refresh()
                time.sleep(delay)
            notify.notification("Completed!", "Wallpaper Tryall Completed!", 5000)
        except KeyboardInterrupt:
            print()
            exit(1)

    def select(self, selected: int) -> None:
        self.selected = selected

    def refresh(self) -> None:
        self.wps[self.selected].download(self.output)
        os.system(self.command + " > /dev/null 2>&1&disown;exit")


def main():
    options = getArgs()
    wm = WallpaperManager(options.config)
    selected = options.number
    done = False
    prt_cnt = -1
    print()

    if options.delay != None:
        wm.tryAll(options.delay)
        done = True

    while not done:
        if options.number == None:
            print(f"\033[{prt_cnt}F\033[0J", end="")
            prt_cnt = 0

            for w in wm.wps:
                print(
                    ("\033[32m" if w.section == "Current" else "")
                    + f"[{prt_cnt+1}] {w.name}\033[0m"
                )
                prt_cnt += 1
        else:
            prt_cnt = wm.count

        try:
            if options.number == None:
                print("\n\033[1F", end="")
                selected = (
                    int(input(f"Select a wallpaper [1-{prt_cnt}]: "))
                    if options.number == None
                    else options.number
                ) - 1
            if selected < 0 or selected > prt_cnt - 1:
                selected = -1
                print(
                    f"\033[{prt_cnt+2}F\033[0J[\033[31mERROR\033[0m]: please input a number between 1 and {prt_cnt}!"
                )
                prt_cnt = -1
            else:
                wm.select(selected)
                wm.refresh()
                done = True
                prt_cnt += 1
        except EOFError:
            print()
            exit(1)
        except KeyboardInterrupt:
            print()
            exit(1)
        except ValueError:
            selected = -1
            print(
                f"\033[{prt_cnt+2}F\033[0J[\033[31mERROR\033[0m]: please input only numbers!"
            )
            prt_cnt = -1

        if options.nonstop == True:
            selected = 0
            done = False


if __name__ == "__main__":
    main()
