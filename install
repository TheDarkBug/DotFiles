#!/bin/bash

CWD=$(pwd)
CONFIG_DIR=".config"
LOCAL_DIRS=("home" "config" "bin" "share")
SYSTEM_DIRS=("" "$CONFIG_DIR" ".local/bin" ".local/share")
INSTALL_DIR="$HOME"

function create_dirs() {
	for d in ${SYSTEM_DIRS[@]}; do
		mkdir -pv "$INSTALL_DIR/$d"
	done
	mkdir -pv "$INSTALL_DIR/config_backup"
}

function install_dir() {
	local_files=$(find "$1" -maxdepth 1 -exec basename {} \;)
	system_files=$(find "$2" -maxdepth 1 -exec basename {} \;)
	[ $(printf "$local_files" | wc -l) -gt 3 ] && local_files=$(printf "$local_files" | tail -n+2)
	[ $(printf "$system_files" | wc -l) -gt 3 ] && system_files=$(printf "$system_files" | tail -n+2)
	for f in $local_files; do
		df=$(printf "$system_files" | grep -e "^$f$")
		[ -z "$df" ] || mv "$HOME/${SYSTEM_DIRS[$i]}/$df" "$INSTALL_DIR/config_backup"
		ln -vs "$CWD/${LOCAL_DIRS[$i]}/$f" "$INSTALL_DIR/${SYSTEM_DIRS[$i]}/"
	done
}

function install_custom() {
  bn="$(basename "$CWD/custom/$1")"
  [ ! -z "$(find "$CWD/$2/" -name "$bn" 2>/dev/null)" ] && mv "$CWD/$2/$bn" "$INSTALL_DIR/config_backup"
	[ -d "$CWD/$2" ] && ln -vs "$CWD/custom/$1" "$CWD/$2"
}

function install_all() {
	for i in {0..3}; do
		install_dir "$CWD/${LOCAL_DIRS[$i]}" "$INSTALL_DIR/${SYSTEM_DIRS[$i]}"
	done

	# install custom configs
	install_custom "nvim/custom" "${LOCAL_DIRS[1]}/nvim"

	# mkdir -p "$HOME/.mozilla/firefox/config/fontconfig"
	# mv $HOME/.var/app/org.mozilla.firefox/config/fontconfig/fonts.conf $HOME/config_backup
	# ln -vs "$cwd/other/fffonts.conf" "$HOME/.mozilla/firefox/config/fontconfig/fonts.conf"
	# mv "$HOME/.mozilla/firefox/config/fontconfig/fonts.conf" "$HOME/config_backup"
	# $HOME/.var/app/org.mozilla.firefox/config/fontconfig/fonts.conf
}

function usage() {
	{
		printf "Usage: $1 [options]\n"
		printf "\toptions:\n"
		printf "\t\t-a\tInstall all\n"
		printf "\t\t-c\tCreate directories\n"
		printf "\t\t-h\tPrints this\n"
		printf "\t\t-i\tInstall [not implemented yet]\n"
		printf "\t\t-r\tRestores original files [not implemented yet]\n"
		printf "\t\t-s\tInstall system configurations [not implemented yet]\n"
	} >&2
	exit
}

while getopts achsri: flag; do
	case "${flag}" in
	a) install_all_flag=1 ;;
	c) create_dirs_flag=1 ;;
	r) restore_flag=1 ;;
	s) system_flag=1 ;;
	i) to_install=${OPTARG} ;;
	*) usage "$0" ;;
	esac
done

[[ $install_all_flag == 1 ]] && create_dirs && install_all
[[ $create_dirs_flag == 1 ]] && create_dirs
[[ $restore_flag == 1 ]] && printf "\033[31m[ERROR]: \033[33m \"-r\" has not been implemented yet!\n"
[[ $system_flag == 1 ]] && printf "\033[31m[ERROR]: \033[33m \"-s\" has not been implemented yet!\n"
[ ! -z $to_install ] && printf "\033[31m[ERROR]: \033[33m \"-i\" has not been implemented yet!\n"

exit 0

# printf "You should also
# \tsudo mv -t $HOME/config_backup /etc/{tlp.conf,environment}; sudo ln -s $cwd/etc/tlp.conf /etc; sudo ln -s $cwd/etc/environment /etc; sudo ln -s $cwd/etc/libinput.conf /etc; sudo ln -s $cwd/etc/envars.sh /etc/profile.d\n"
# printf "\n/dev/nvme0n1p3  /run/media/windows  ntfs rw,auto,user,fmask=133,dmask=022,uid=1000,gid=1000 0 0\n" >> /etc/fstab

# printf "To install all the dependances on arch linux, you can run this commands:\n\n
# git clone https://aur.archlinux.org/paru.git; cd paru; makepkg -si\n
# paru -Syu --noconfirm hyprland git alacritty zsh uwufetch starship nautilus ttf-jetbrains-mono mako pipewire wireplumber grimshot-git swayidle syncthing gammastep wf-recorder rofi-calc rofi-emoji noto-fonts-emoji nerd-fonts wl-clipboard polkit-gnome xdg-desktop-portal-hyprland  waybar-hyprland-git rofi-lbonn-wayland-git wlogout swaylock-effects bluetooth-autoconnect\n"
