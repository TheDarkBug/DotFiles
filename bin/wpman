#!/bin/env python
import os, re, requests, argparse, time
import notify  # pip install notify-send


def getArgs() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-c",
        "--config",
        dest="config",
        help="set configuration FILE path",
        metavar="FILE",
    )
    parser.add_argument(
        "-e",
        "--edit",
        dest="edit",
        help="manually edit wallpapers.md with $EDITOR",
        action="store_true",
    )
    parser.add_argument(
        "-t",
        "--try-all",
        dest="delay",
        help="try all the wallpapers with TIME delay",
        metavar="TIME",
        type=int,
        default=None,
        const=2,
        nargs="?",
    )
    parser.add_argument(
        "-w",
        "--wallpaper",
        dest="number",
        help="set wallpaper ID immediately",
        metavar="ID",
        type=int,
    )
    options = parser.parse_args()
    if options.config is None:
        options.config = os.path.expanduser("~/.config/DotFiles/wallpapers.md")

    if options.edit == True:
        editor = os.getenv("EDITOR")
        if editor is None:
            editor = "vi"
        os.system(f"{editor} {options.config}")
        exit(0)
    return options


class Wallpaper:
    def __init__(self, section: str, name: str, url: str, credits_link: str) -> None:
        self.section = section
        self.name = name
        self.url = url
        self.credits_link = credits_link

    def download(self, output: str) -> None:
        with open(output, "wb") as f:
            f.write(requests.get(self.url).content)


class WallpaperConfig:
    def __init__(self, path: str) -> None:
        self.path = path
        self.selected = -1
        self.command = ""
        self.output = ""
        self.wps = []
        self.parse()
        self.count = len(self.wps)

    def parse(self) -> None:
        fcontent = ""
        with open(self.path, "r") as f:
            fcontent = f.read().replace("\n", "")
        self.output, self.command = re.findall(r"`([^`]+)`", fcontent)
        self.output = os.path.expanduser(self.output)
        sections = re.findall(r"## ([^##]+)", fcontent)
        wpre = re.compile(
            r"\[\!\[(?P<name>[^\]]+)\]\((?P<direct_link>[^\)]+)\)\]\((?P<page_link>[^\)]+)\)"
        )
        for s in sections:
            name = re.search(r"^([^[]+)", s)
            if name:
                name = name.group()
                s = re.sub(f"^{name}", "", s)
                links = re.findall(wpre, s)
                if links:
                    for l in links:
                        self.wps.append(
                            Wallpaper(
                                section=name,
                                name=l[0],
                                url=l[1],
                                credits_link=l[2],
                            )
                        )
        if self.wps[0].section == "Current":
            for i in range(len(self.wps)):
                if self.wps[i].credits_link == self.wps[0].credits_link:
                    self.selected = i - 1
            self.selected = [
                i
                for i in range(1, len(self.wps))
                if self.wps[i].credits_link == self.wps[0].credits_link
            ][0] - 1
            self.wps.pop(0)

    def save(self) -> None:
        with open(self.path, "w") as f:
            f.write(
                "# Wallpapers\n\n**NOTE**: _this file was automatically generated by [bin/wpman.py](https://github.com/TheDarkBug/DotFiles/blob/main/bin/wpman.py), you shouldn't modify it!_\n\n+ Default wallpaper path: `~/Pictures/wallpaper.jpg`\n+ Default wallpaper program: `pkill hyprpaper; hyprpaper`\n\n\n"
            )
            if self.selected >= 0:
                selected = self.wps[self.selected]
                f.write(
                    f"## Current\n\n[![{selected.name}]({selected.url})]({selected.credits_link})\n"
                )
            currentSection = "Current"
            for w in self.wps:
                if w.section != currentSection:
                    f.write(f"\n\n## {w.section}\n\n")
                currentSection = w.section
                f.write(f"[![{w.name}]({w.url})]({w.credits_link})\n")

    def tryAll(self, delay):
        try:
            for i in range(3):
                notify.notification("Starting in", f"{3 - i}...", 1000)
                time.sleep(1)
            for i in range(self.selected, len(self.wps)):
                notify.notification(
                    f"[{i}] ({self.wps[i].section})",
                    f"{self.wps[i].name}",
                    delay * 1000,
                )
                self.select(i)
                self.refresh()
                time.sleep(delay)
            notify.notification("Completed!", "Wallpaper Tryall Completed!", 5000)
        except KeyboardInterrupt:
            print()
            exit(1)

    def print(self) -> None:
        currentSection = ""
        for i, w in enumerate(self.wps):
            if w.section != currentSection:
                currentSection = w.section
                print(f"\033[33m--- {w.section} ---\033[0m")
            print(
                ("\033[32m" if self.selected == i else "") + f"[{i+1}] {w.name}\033[0m"
            )

    def select(self, selected: int) -> None:
        self.selected = selected
        if selected < 0 or selected > self.count:
            self.selected = -1
            print(
                f"[\033[31mERROR\033[0m]: please input a number between 1 and {self.count}!\033[2F"
            )
            raise RuntimeError

    def refresh(self) -> None:
        if self.selected > 0 and self.selected < self.count:
            self.wps[self.selected].download(self.output)
            os.system(self.command + " > /dev/null 2>&1&disown;exit")


def main():
    options = getArgs()
    config = WallpaperConfig(options.config)
    done = False

    if options.delay != None:
        config.tryAll(options.delay)
        done = True

    if options.number == None:
        config.print()
        print("\033[1F")
    while not done:
        try:
            config.select(
                (int(input(f"\033[KSelect a wallpaper [1-{config.count}]: ")) - 1)
                if options.number is None
                else options.number - 1
            )
            options.number = None
            print("\033[K\033[2F")
            config.refresh()
            shouldSave = (
                input("Do you want to save the configuration? [Y/n]: ").lower() or "y"
            ) == "y"
            print("\033[K\033[2F")
            if shouldSave:
                config.save()
                print("Saved to " + config.path)
                done = True
        except RuntimeError:
            pass
        except ValueError:
            print(f"[\033[31mERROR\033[0m]: please input only numbers!\033[2F")
        except EOFError:
            print()
            exit(1)
        except KeyboardInterrupt:
            print()
            exit(1)


if __name__ == "__main__":
    main()
